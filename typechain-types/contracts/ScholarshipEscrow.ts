/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace ScholarshipEscrow {
  export type EligibilityCriteriaStruct = {
    minGPA: BigNumberish;
    requiredCourses: string[];
    allowedDepartments: string[];
    minCertificates: BigNumberish;
    enrollmentAfter: BigNumberish;
    enrollmentBefore: BigNumberish;
    requiresAllCourses: boolean;
  };

  export type EligibilityCriteriaStructOutput = [
    minGPA: bigint,
    requiredCourses: string[],
    allowedDepartments: string[],
    minCertificates: bigint,
    enrollmentAfter: bigint,
    enrollmentBefore: bigint,
    requiresAllCourses: boolean
  ] & {
    minGPA: bigint;
    requiredCourses: string[];
    allowedDepartments: string[];
    minCertificates: bigint;
    enrollmentAfter: bigint;
    enrollmentBefore: bigint;
    requiresAllCourses: boolean;
  };

  export type ScholarshipStruct = {
    name: string;
    description: string;
    totalAmount: BigNumberish;
    claimedAmount: BigNumberish;
    remainingAmount: BigNumberish;
    maxRecipients: BigNumberish;
    amountPerRecipient: BigNumberish;
    createdAt: BigNumberish;
    deadline: BigNumberish;
    isActive: boolean;
    createdBy: AddressLike;
    tokenAddress: AddressLike;
    tokenSymbol: string;
  };

  export type ScholarshipStructOutput = [
    name: string,
    description: string,
    totalAmount: bigint,
    claimedAmount: bigint,
    remainingAmount: bigint,
    maxRecipients: bigint,
    amountPerRecipient: bigint,
    createdAt: bigint,
    deadline: bigint,
    isActive: boolean,
    createdBy: string,
    tokenAddress: string,
    tokenSymbol: string
  ] & {
    name: string;
    description: string;
    totalAmount: bigint;
    claimedAmount: bigint;
    remainingAmount: bigint;
    maxRecipients: bigint;
    amountPerRecipient: bigint;
    createdAt: bigint;
    deadline: bigint;
    isActive: boolean;
    createdBy: string;
    tokenAddress: string;
    tokenSymbol: string;
  };
}

export interface ScholarshipEscrowInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ADMIN_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "SCHOLARSHIP_MANAGER_ROLE"
      | "certificateNFT"
      | "checkCourseRequirements"
      | "checkDepartmentRequirement"
      | "checkEnrollmentRequirement"
      | "claimScholarship"
      | "createScholarship"
      | "depositFunds"
      | "getContractBalance"
      | "getRoleAdmin"
      | "getScholarship"
      | "getStudentScholarships"
      | "getTotalClaimed"
      | "grantRole"
      | "hasRole"
      | "isEligibleForScholarship"
      | "pause"
      | "paused"
      | "renounceRole"
      | "revokeRole"
      | "revokeScholarship"
      | "scholarshipClaims"
      | "scholarshipCriteria"
      | "scholarships"
      | "studentScholarships"
      | "supportsInterface"
      | "totalClaimed"
      | "unpause"
      | "withdrawFunds"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "FundsDeposited"
      | "FundsWithdrawn"
      | "Paused"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "ScholarshipClaimed"
      | "ScholarshipCreated"
      | "ScholarshipRevoked"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SCHOLARSHIP_MANAGER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "certificateNFT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkCourseRequirements",
    values: [AddressLike, string[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "checkDepartmentRequirement",
    values: [AddressLike, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "checkEnrollmentRequirement",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimScholarship",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createScholarship",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      AddressLike,
      string,
      ScholarshipEscrow.EligibilityCriteriaStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositFunds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getContractBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getScholarship",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getStudentScholarships",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalClaimed",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isEligibleForScholarship",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeScholarship",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "scholarshipClaims",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "scholarshipCriteria",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "scholarships",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "studentScholarships",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalClaimed",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawFunds",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "ADMIN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SCHOLARSHIP_MANAGER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "certificateNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkCourseRequirements",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkDepartmentRequirement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkEnrollmentRequirement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimScholarship",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createScholarship",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getScholarship",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStudentScholarships",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalClaimed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isEligibleForScholarship",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "revokeScholarship",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "scholarshipClaims",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "scholarshipCriteria",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "scholarships",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "studentScholarships",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalClaimed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFunds",
    data: BytesLike
  ): Result;
}

export namespace FundsDepositedEvent {
  export type InputTuple = [
    depositor: AddressLike,
    amount: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    depositor: string,
    amount: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    depositor: string;
    amount: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FundsWithdrawnEvent {
  export type InputTuple = [
    admin: AddressLike,
    amount: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [admin: string, amount: bigint, timestamp: bigint];
  export interface OutputObject {
    admin: string;
    amount: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ScholarshipClaimedEvent {
  export type InputTuple = [
    scholarshipId: BigNumberish,
    student: AddressLike,
    amount: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    scholarshipId: bigint,
    student: string,
    amount: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    scholarshipId: bigint;
    student: string;
    amount: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ScholarshipCreatedEvent {
  export type InputTuple = [
    scholarshipId: BigNumberish,
    name: string,
    totalAmount: BigNumberish,
    maxRecipients: BigNumberish,
    deadline: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    scholarshipId: bigint,
    name: string,
    totalAmount: bigint,
    maxRecipients: bigint,
    deadline: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    scholarshipId: bigint;
    name: string;
    totalAmount: bigint;
    maxRecipients: bigint;
    deadline: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ScholarshipRevokedEvent {
  export type InputTuple = [
    scholarshipId: BigNumberish,
    admin: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    scholarshipId: bigint,
    admin: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    scholarshipId: bigint;
    admin: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ScholarshipEscrow extends BaseContract {
  connect(runner?: ContractRunner | null): ScholarshipEscrow;
  waitForDeployment(): Promise<this>;

  interface: ScholarshipEscrowInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  SCHOLARSHIP_MANAGER_ROLE: TypedContractMethod<[], [string], "view">;

  certificateNFT: TypedContractMethod<[], [string], "view">;

  checkCourseRequirements: TypedContractMethod<
    [student: AddressLike, requiredCourses: string[], requiresAll: boolean],
    [boolean],
    "view"
  >;

  checkDepartmentRequirement: TypedContractMethod<
    [student: AddressLike, allowedDepartments: string[]],
    [boolean],
    "view"
  >;

  checkEnrollmentRequirement: TypedContractMethod<
    [
      student: AddressLike,
      enrollmentAfter: BigNumberish,
      enrollmentBefore: BigNumberish
    ],
    [boolean],
    "view"
  >;

  claimScholarship: TypedContractMethod<
    [scholarshipId: BigNumberish],
    [void],
    "nonpayable"
  >;

  createScholarship: TypedContractMethod<
    [
      name: string,
      description: string,
      totalAmount: BigNumberish,
      maxRecipients: BigNumberish,
      deadline: BigNumberish,
      tokenAddress: AddressLike,
      tokenSymbol: string,
      criteria: ScholarshipEscrow.EligibilityCriteriaStruct
    ],
    [bigint],
    "payable"
  >;

  depositFunds: TypedContractMethod<[], [void], "payable">;

  getContractBalance: TypedContractMethod<[], [bigint], "view">;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getScholarship: TypedContractMethod<
    [scholarshipId: BigNumberish],
    [ScholarshipEscrow.ScholarshipStructOutput],
    "view"
  >;

  getStudentScholarships: TypedContractMethod<
    [student: AddressLike],
    [bigint[]],
    "view"
  >;

  getTotalClaimed: TypedContractMethod<
    [student: AddressLike],
    [bigint],
    "view"
  >;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  isEligibleForScholarship: TypedContractMethod<
    [scholarshipId: BigNumberish, student: AddressLike],
    [boolean],
    "view"
  >;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeScholarship: TypedContractMethod<
    [scholarshipId: BigNumberish],
    [void],
    "nonpayable"
  >;

  scholarshipClaims: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;

  scholarshipCriteria: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, boolean] & {
        minGPA: bigint;
        minCertificates: bigint;
        enrollmentAfter: bigint;
        enrollmentBefore: bigint;
        requiresAllCourses: boolean;
      }
    ],
    "view"
  >;

  scholarships: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        string,
        string,
        string
      ] & {
        name: string;
        description: string;
        totalAmount: bigint;
        claimedAmount: bigint;
        remainingAmount: bigint;
        maxRecipients: bigint;
        amountPerRecipient: bigint;
        createdAt: bigint;
        deadline: bigint;
        isActive: boolean;
        createdBy: string;
        tokenAddress: string;
        tokenSymbol: string;
      }
    ],
    "view"
  >;

  studentScholarships: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  totalClaimed: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  withdrawFunds: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "SCHOLARSHIP_MANAGER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "certificateNFT"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "checkCourseRequirements"
  ): TypedContractMethod<
    [student: AddressLike, requiredCourses: string[], requiresAll: boolean],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "checkDepartmentRequirement"
  ): TypedContractMethod<
    [student: AddressLike, allowedDepartments: string[]],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "checkEnrollmentRequirement"
  ): TypedContractMethod<
    [
      student: AddressLike,
      enrollmentAfter: BigNumberish,
      enrollmentBefore: BigNumberish
    ],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "claimScholarship"
  ): TypedContractMethod<[scholarshipId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createScholarship"
  ): TypedContractMethod<
    [
      name: string,
      description: string,
      totalAmount: BigNumberish,
      maxRecipients: BigNumberish,
      deadline: BigNumberish,
      tokenAddress: AddressLike,
      tokenSymbol: string,
      criteria: ScholarshipEscrow.EligibilityCriteriaStruct
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "depositFunds"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "getContractBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getScholarship"
  ): TypedContractMethod<
    [scholarshipId: BigNumberish],
    [ScholarshipEscrow.ScholarshipStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getStudentScholarships"
  ): TypedContractMethod<[student: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getTotalClaimed"
  ): TypedContractMethod<[student: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isEligibleForScholarship"
  ): TypedContractMethod<
    [scholarshipId: BigNumberish, student: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeScholarship"
  ): TypedContractMethod<[scholarshipId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "scholarshipClaims"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "scholarshipCriteria"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, boolean] & {
        minGPA: bigint;
        minCertificates: bigint;
        enrollmentAfter: bigint;
        enrollmentBefore: bigint;
        requiresAllCourses: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "scholarships"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        string,
        string,
        string
      ] & {
        name: string;
        description: string;
        totalAmount: bigint;
        claimedAmount: bigint;
        remainingAmount: bigint;
        maxRecipients: bigint;
        amountPerRecipient: bigint;
        createdAt: bigint;
        deadline: bigint;
        isActive: boolean;
        createdBy: string;
        tokenAddress: string;
        tokenSymbol: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "studentScholarships"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "totalClaimed"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawFunds"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "FundsDeposited"
  ): TypedContractEvent<
    FundsDepositedEvent.InputTuple,
    FundsDepositedEvent.OutputTuple,
    FundsDepositedEvent.OutputObject
  >;
  getEvent(
    key: "FundsWithdrawn"
  ): TypedContractEvent<
    FundsWithdrawnEvent.InputTuple,
    FundsWithdrawnEvent.OutputTuple,
    FundsWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "ScholarshipClaimed"
  ): TypedContractEvent<
    ScholarshipClaimedEvent.InputTuple,
    ScholarshipClaimedEvent.OutputTuple,
    ScholarshipClaimedEvent.OutputObject
  >;
  getEvent(
    key: "ScholarshipCreated"
  ): TypedContractEvent<
    ScholarshipCreatedEvent.InputTuple,
    ScholarshipCreatedEvent.OutputTuple,
    ScholarshipCreatedEvent.OutputObject
  >;
  getEvent(
    key: "ScholarshipRevoked"
  ): TypedContractEvent<
    ScholarshipRevokedEvent.InputTuple,
    ScholarshipRevokedEvent.OutputTuple,
    ScholarshipRevokedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "FundsDeposited(address,uint256,uint256)": TypedContractEvent<
      FundsDepositedEvent.InputTuple,
      FundsDepositedEvent.OutputTuple,
      FundsDepositedEvent.OutputObject
    >;
    FundsDeposited: TypedContractEvent<
      FundsDepositedEvent.InputTuple,
      FundsDepositedEvent.OutputTuple,
      FundsDepositedEvent.OutputObject
    >;

    "FundsWithdrawn(address,uint256,uint256)": TypedContractEvent<
      FundsWithdrawnEvent.InputTuple,
      FundsWithdrawnEvent.OutputTuple,
      FundsWithdrawnEvent.OutputObject
    >;
    FundsWithdrawn: TypedContractEvent<
      FundsWithdrawnEvent.InputTuple,
      FundsWithdrawnEvent.OutputTuple,
      FundsWithdrawnEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "ScholarshipClaimed(uint256,address,uint256,uint256)": TypedContractEvent<
      ScholarshipClaimedEvent.InputTuple,
      ScholarshipClaimedEvent.OutputTuple,
      ScholarshipClaimedEvent.OutputObject
    >;
    ScholarshipClaimed: TypedContractEvent<
      ScholarshipClaimedEvent.InputTuple,
      ScholarshipClaimedEvent.OutputTuple,
      ScholarshipClaimedEvent.OutputObject
    >;

    "ScholarshipCreated(uint256,string,uint256,uint256,uint256,uint256)": TypedContractEvent<
      ScholarshipCreatedEvent.InputTuple,
      ScholarshipCreatedEvent.OutputTuple,
      ScholarshipCreatedEvent.OutputObject
    >;
    ScholarshipCreated: TypedContractEvent<
      ScholarshipCreatedEvent.InputTuple,
      ScholarshipCreatedEvent.OutputTuple,
      ScholarshipCreatedEvent.OutputObject
    >;

    "ScholarshipRevoked(uint256,address,uint256)": TypedContractEvent<
      ScholarshipRevokedEvent.InputTuple,
      ScholarshipRevokedEvent.OutputTuple,
      ScholarshipRevokedEvent.OutputObject
    >;
    ScholarshipRevoked: TypedContractEvent<
      ScholarshipRevokedEvent.InputTuple,
      ScholarshipRevokedEvent.OutputTuple,
      ScholarshipRevokedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
