/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace VignanRegistry {
  export type CourseStruct = {
    courseId: BigNumberish;
    courseCode: string;
    courseName: string;
    description: string;
    credits: BigNumberish;
    department: string;
    isActive: boolean;
    createdAt: BigNumberish;
    createdBy: AddressLike;
  };

  export type CourseStructOutput = [
    courseId: bigint,
    courseCode: string,
    courseName: string,
    description: string,
    credits: bigint,
    department: string,
    isActive: boolean,
    createdAt: bigint,
    createdBy: string
  ] & {
    courseId: bigint;
    courseCode: string;
    courseName: string;
    description: string;
    credits: bigint;
    department: string;
    isActive: boolean;
    createdAt: bigint;
    createdBy: string;
  };

  export type StudentStruct = {
    studentId: BigNumberish;
    studentAddress: AddressLike;
    studentNumber: string;
    name: string;
    email: string;
    department: string;
    program: string;
    enrollmentDate: BigNumberish;
    graduationDate: BigNumberish;
    isActive: boolean;
    isGraduated: boolean;
    degree: string;
    enrolledCourses: BigNumberish[];
  };

  export type StudentStructOutput = [
    studentId: bigint,
    studentAddress: string,
    studentNumber: string,
    name: string,
    email: string,
    department: string,
    program: string,
    enrollmentDate: bigint,
    graduationDate: bigint,
    isActive: boolean,
    isGraduated: boolean,
    degree: string,
    enrolledCourses: bigint[]
  ] & {
    studentId: bigint;
    studentAddress: string;
    studentNumber: string;
    name: string;
    email: string;
    department: string;
    program: string;
    enrollmentDate: bigint;
    graduationDate: bigint;
    isActive: boolean;
    isGraduated: boolean;
    degree: string;
    enrolledCourses: bigint[];
  };
}

export interface VignanRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ADMIN_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "REGISTRAR_ROLE"
      | "VERIFIER_ROLE"
      | "addressToStudentId"
      | "courses"
      | "createCourse"
      | "deactivateCourse"
      | "deactivateStudent"
      | "enrollStudent"
      | "getCourse"
      | "getRoleAdmin"
      | "getStudent"
      | "getStudentByAddress"
      | "getTotalCourses"
      | "getTotalStudents"
      | "graduateStudent"
      | "grantRole"
      | "hasRole"
      | "isStudentRegistered"
      | "pause"
      | "paused"
      | "registerStudent"
      | "registeredStudents"
      | "renounceRole"
      | "revokeRole"
      | "students"
      | "supportsInterface"
      | "unpause"
      | "updateCourse"
      | "updateStudent"
      | "usedStudentNumbers"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CourseCreated"
      | "CourseUpdated"
      | "Paused"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "StudentEnrolled"
      | "StudentGraduated"
      | "StudentRegistered"
      | "StudentUpdated"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REGISTRAR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VERIFIER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addressToStudentId",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "courses",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createCourse",
    values: [string, string, string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "deactivateCourse",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deactivateStudent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "enrollStudent",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCourse",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getStudent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getStudentByAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalCourses",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalStudents",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "graduateStudent",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isStudentRegistered",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerStudent",
    values: [AddressLike, string, string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "registeredStudents",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "students",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateCourse",
    values: [BigNumberish, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateStudent",
    values: [BigNumberish, string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "usedStudentNumbers",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "ADMIN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REGISTRAR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VERIFIER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addressToStudentId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "courses", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createCourse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deactivateCourse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deactivateStudent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enrollStudent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getCourse", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getStudent", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getStudentByAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalCourses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalStudents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "graduateStudent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isStudentRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerStudent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registeredStudents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "students", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateCourse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateStudent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "usedStudentNumbers",
    data: BytesLike
  ): Result;
}

export namespace CourseCreatedEvent {
  export type InputTuple = [
    courseId: BigNumberish,
    courseCode: string,
    courseName: string,
    credits: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    courseId: bigint,
    courseCode: string,
    courseName: string,
    credits: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    courseId: bigint;
    courseCode: string;
    courseName: string;
    credits: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CourseUpdatedEvent {
  export type InputTuple = [
    courseId: BigNumberish,
    courseName: string,
    credits: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    courseId: bigint,
    courseName: string,
    credits: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    courseId: bigint;
    courseName: string;
    credits: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StudentEnrolledEvent {
  export type InputTuple = [
    studentId: BigNumberish,
    courseId: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    studentId: bigint,
    courseId: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    studentId: bigint;
    courseId: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StudentGraduatedEvent {
  export type InputTuple = [
    studentId: BigNumberish,
    degree: string,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    studentId: bigint,
    degree: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    studentId: bigint;
    degree: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StudentRegisteredEvent {
  export type InputTuple = [
    studentId: BigNumberish,
    studentAddress: AddressLike,
    studentNumber: string,
    name: string,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    studentId: bigint,
    studentAddress: string,
    studentNumber: string,
    name: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    studentId: bigint;
    studentAddress: string;
    studentNumber: string;
    name: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StudentUpdatedEvent {
  export type InputTuple = [
    studentId: BigNumberish,
    studentAddress: AddressLike,
    name: string,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    studentId: bigint,
    studentAddress: string,
    name: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    studentId: bigint;
    studentAddress: string;
    name: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface VignanRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): VignanRegistry;
  waitForDeployment(): Promise<this>;

  interface: VignanRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  REGISTRAR_ROLE: TypedContractMethod<[], [string], "view">;

  VERIFIER_ROLE: TypedContractMethod<[], [string], "view">;

  addressToStudentId: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  courses: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        bigint,
        string,
        boolean,
        bigint,
        string
      ] & {
        courseId: bigint;
        courseCode: string;
        courseName: string;
        description: string;
        credits: bigint;
        department: string;
        isActive: boolean;
        createdAt: bigint;
        createdBy: string;
      }
    ],
    "view"
  >;

  createCourse: TypedContractMethod<
    [
      courseCode: string,
      courseName: string,
      description: string,
      credits: BigNumberish,
      department: string
    ],
    [bigint],
    "nonpayable"
  >;

  deactivateCourse: TypedContractMethod<
    [courseId: BigNumberish],
    [void],
    "nonpayable"
  >;

  deactivateStudent: TypedContractMethod<
    [studentId: BigNumberish],
    [void],
    "nonpayable"
  >;

  enrollStudent: TypedContractMethod<
    [studentId: BigNumberish, courseId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getCourse: TypedContractMethod<
    [courseId: BigNumberish],
    [VignanRegistry.CourseStructOutput],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getStudent: TypedContractMethod<
    [studentId: BigNumberish],
    [VignanRegistry.StudentStructOutput],
    "view"
  >;

  getStudentByAddress: TypedContractMethod<
    [studentAddress: AddressLike],
    [VignanRegistry.StudentStructOutput],
    "view"
  >;

  getTotalCourses: TypedContractMethod<[], [bigint], "view">;

  getTotalStudents: TypedContractMethod<[], [bigint], "view">;

  graduateStudent: TypedContractMethod<
    [studentId: BigNumberish, degree: string],
    [void],
    "nonpayable"
  >;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  isStudentRegistered: TypedContractMethod<
    [studentAddress: AddressLike],
    [boolean],
    "view"
  >;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  registerStudent: TypedContractMethod<
    [
      studentAddress: AddressLike,
      studentNumber: string,
      name: string,
      email: string,
      department: string,
      program: string
    ],
    [bigint],
    "nonpayable"
  >;

  registeredStudents: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  students: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        boolean,
        boolean,
        string
      ] & {
        studentId: bigint;
        studentAddress: string;
        studentNumber: string;
        name: string;
        email: string;
        department: string;
        program: string;
        enrollmentDate: bigint;
        graduationDate: bigint;
        isActive: boolean;
        isGraduated: boolean;
        degree: string;
      }
    ],
    "view"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  updateCourse: TypedContractMethod<
    [
      courseId: BigNumberish,
      courseName: string,
      description: string,
      credits: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  updateStudent: TypedContractMethod<
    [
      studentId: BigNumberish,
      name: string,
      email: string,
      department: string,
      program: string
    ],
    [void],
    "nonpayable"
  >;

  usedStudentNumbers: TypedContractMethod<[arg0: string], [boolean], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "REGISTRAR_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "VERIFIER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "addressToStudentId"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "courses"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        bigint,
        string,
        boolean,
        bigint,
        string
      ] & {
        courseId: bigint;
        courseCode: string;
        courseName: string;
        description: string;
        credits: bigint;
        department: string;
        isActive: boolean;
        createdAt: bigint;
        createdBy: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "createCourse"
  ): TypedContractMethod<
    [
      courseCode: string,
      courseName: string,
      description: string,
      credits: BigNumberish,
      department: string
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deactivateCourse"
  ): TypedContractMethod<[courseId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "deactivateStudent"
  ): TypedContractMethod<[studentId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "enrollStudent"
  ): TypedContractMethod<
    [studentId: BigNumberish, courseId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getCourse"
  ): TypedContractMethod<
    [courseId: BigNumberish],
    [VignanRegistry.CourseStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getStudent"
  ): TypedContractMethod<
    [studentId: BigNumberish],
    [VignanRegistry.StudentStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getStudentByAddress"
  ): TypedContractMethod<
    [studentAddress: AddressLike],
    [VignanRegistry.StudentStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTotalCourses"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTotalStudents"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "graduateStudent"
  ): TypedContractMethod<
    [studentId: BigNumberish, degree: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isStudentRegistered"
  ): TypedContractMethod<[studentAddress: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "registerStudent"
  ): TypedContractMethod<
    [
      studentAddress: AddressLike,
      studentNumber: string,
      name: string,
      email: string,
      department: string,
      program: string
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registeredStudents"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "students"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        boolean,
        boolean,
        string
      ] & {
        studentId: bigint;
        studentAddress: string;
        studentNumber: string;
        name: string;
        email: string;
        department: string;
        program: string;
        enrollmentDate: bigint;
        graduationDate: bigint;
        isActive: boolean;
        isGraduated: boolean;
        degree: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateCourse"
  ): TypedContractMethod<
    [
      courseId: BigNumberish,
      courseName: string,
      description: string,
      credits: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateStudent"
  ): TypedContractMethod<
    [
      studentId: BigNumberish,
      name: string,
      email: string,
      department: string,
      program: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "usedStudentNumbers"
  ): TypedContractMethod<[arg0: string], [boolean], "view">;

  getEvent(
    key: "CourseCreated"
  ): TypedContractEvent<
    CourseCreatedEvent.InputTuple,
    CourseCreatedEvent.OutputTuple,
    CourseCreatedEvent.OutputObject
  >;
  getEvent(
    key: "CourseUpdated"
  ): TypedContractEvent<
    CourseUpdatedEvent.InputTuple,
    CourseUpdatedEvent.OutputTuple,
    CourseUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "StudentEnrolled"
  ): TypedContractEvent<
    StudentEnrolledEvent.InputTuple,
    StudentEnrolledEvent.OutputTuple,
    StudentEnrolledEvent.OutputObject
  >;
  getEvent(
    key: "StudentGraduated"
  ): TypedContractEvent<
    StudentGraduatedEvent.InputTuple,
    StudentGraduatedEvent.OutputTuple,
    StudentGraduatedEvent.OutputObject
  >;
  getEvent(
    key: "StudentRegistered"
  ): TypedContractEvent<
    StudentRegisteredEvent.InputTuple,
    StudentRegisteredEvent.OutputTuple,
    StudentRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "StudentUpdated"
  ): TypedContractEvent<
    StudentUpdatedEvent.InputTuple,
    StudentUpdatedEvent.OutputTuple,
    StudentUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "CourseCreated(uint256,string,string,uint256,uint256)": TypedContractEvent<
      CourseCreatedEvent.InputTuple,
      CourseCreatedEvent.OutputTuple,
      CourseCreatedEvent.OutputObject
    >;
    CourseCreated: TypedContractEvent<
      CourseCreatedEvent.InputTuple,
      CourseCreatedEvent.OutputTuple,
      CourseCreatedEvent.OutputObject
    >;

    "CourseUpdated(uint256,string,uint256,uint256)": TypedContractEvent<
      CourseUpdatedEvent.InputTuple,
      CourseUpdatedEvent.OutputTuple,
      CourseUpdatedEvent.OutputObject
    >;
    CourseUpdated: TypedContractEvent<
      CourseUpdatedEvent.InputTuple,
      CourseUpdatedEvent.OutputTuple,
      CourseUpdatedEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "StudentEnrolled(uint256,uint256,uint256)": TypedContractEvent<
      StudentEnrolledEvent.InputTuple,
      StudentEnrolledEvent.OutputTuple,
      StudentEnrolledEvent.OutputObject
    >;
    StudentEnrolled: TypedContractEvent<
      StudentEnrolledEvent.InputTuple,
      StudentEnrolledEvent.OutputTuple,
      StudentEnrolledEvent.OutputObject
    >;

    "StudentGraduated(uint256,string,uint256)": TypedContractEvent<
      StudentGraduatedEvent.InputTuple,
      StudentGraduatedEvent.OutputTuple,
      StudentGraduatedEvent.OutputObject
    >;
    StudentGraduated: TypedContractEvent<
      StudentGraduatedEvent.InputTuple,
      StudentGraduatedEvent.OutputTuple,
      StudentGraduatedEvent.OutputObject
    >;

    "StudentRegistered(uint256,address,string,string,uint256)": TypedContractEvent<
      StudentRegisteredEvent.InputTuple,
      StudentRegisteredEvent.OutputTuple,
      StudentRegisteredEvent.OutputObject
    >;
    StudentRegistered: TypedContractEvent<
      StudentRegisteredEvent.InputTuple,
      StudentRegisteredEvent.OutputTuple,
      StudentRegisteredEvent.OutputObject
    >;

    "StudentUpdated(uint256,address,string,uint256)": TypedContractEvent<
      StudentUpdatedEvent.InputTuple,
      StudentUpdatedEvent.OutputTuple,
      StudentUpdatedEvent.OutputObject
    >;
    StudentUpdated: TypedContractEvent<
      StudentUpdatedEvent.InputTuple,
      StudentUpdatedEvent.OutputTuple,
      StudentUpdatedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
