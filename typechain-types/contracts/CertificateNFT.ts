/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace CertificateNFT {
  export type CourseStruct = {
    courseCode: string;
    courseTitle: string;
    gradeSecured: string;
    gradePoints: BigNumberish;
    status: string;
    creditsObtained: BigNumberish;
  };

  export type CourseStructOutput = [
    courseCode: string,
    courseTitle: string,
    gradeSecured: string,
    gradePoints: bigint,
    status: string,
    creditsObtained: bigint
  ] & {
    courseCode: string;
    courseTitle: string;
    gradeSecured: string;
    gradePoints: bigint;
    status: string;
    creditsObtained: bigint;
  };

  export type CertificateDataStruct = {
    studentName: string;
    courseName: string;
    grade: string;
    ipfsHash: string;
    department: string;
    issueDate: BigNumberish;
    isRevoked: boolean;
    issuer: AddressLike;
  };

  export type CertificateDataStructOutput = [
    studentName: string,
    courseName: string,
    grade: string,
    ipfsHash: string,
    department: string,
    issueDate: bigint,
    isRevoked: boolean,
    issuer: string
  ] & {
    studentName: string;
    courseName: string;
    grade: string;
    ipfsHash: string;
    department: string;
    issueDate: bigint;
    isRevoked: boolean;
    issuer: string;
  };

  export type SemesterCertificateStruct = {
    studentName: string;
    serialNo: string;
    memoNo: string;
    regdNo: string;
    branch: string;
    examination: string;
    monthYearExams: string;
    aadharNo: string;
    studentPhoto: string;
    courses: CertificateNFT.CourseStruct[];
    totalCredits: BigNumberish;
    sgpa: BigNumberish;
    mediumOfInstruction: string;
    issueDate: BigNumberish;
    issuer: AddressLike;
    isRevoked: boolean;
  };

  export type SemesterCertificateStructOutput = [
    studentName: string,
    serialNo: string,
    memoNo: string,
    regdNo: string,
    branch: string,
    examination: string,
    monthYearExams: string,
    aadharNo: string,
    studentPhoto: string,
    courses: CertificateNFT.CourseStructOutput[],
    totalCredits: bigint,
    sgpa: bigint,
    mediumOfInstruction: string,
    issueDate: bigint,
    issuer: string,
    isRevoked: boolean
  ] & {
    studentName: string;
    serialNo: string;
    memoNo: string;
    regdNo: string;
    branch: string;
    examination: string;
    monthYearExams: string;
    aadharNo: string;
    studentPhoto: string;
    courses: CertificateNFT.CourseStructOutput[];
    totalCredits: bigint;
    sgpa: bigint;
    mediumOfInstruction: string;
    issueDate: bigint;
    issuer: string;
    isRevoked: boolean;
  };
}

export interface CertificateNFTInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ADMIN_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "MINTER_ROLE"
      | "approve"
      | "balanceOf"
      | "calculateSGPA"
      | "certificates"
      | "cidToTokenId"
      | "getApproved"
      | "getCIDByTokenId"
      | "getCertificateData"
      | "getRoleAdmin"
      | "getSemesterCertificate"
      | "getStudentCertificates"
      | "getStudentSemesterCertificates"
      | "getTokenIdByCID"
      | "grantRole"
      | "hasRole"
      | "isApprovedForAll"
      | "isMemoNumberUsed"
      | "isSerialNumberUsed"
      | "mintCertificate"
      | "mintSemesterCertificate"
      | "name"
      | "ownerOf"
      | "pause"
      | "paused"
      | "renounceRole"
      | "revokeCertificate"
      | "revokeRole"
      | "revokeSemesterCertificate"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "semesterCertificates"
      | "setApprovalForAll"
      | "setBaseURI"
      | "studentCertificates"
      | "studentSemesterCerts"
      | "supportsInterface"
      | "symbol"
      | "tokenIdToCID"
      | "tokenURI"
      | "transferFrom"
      | "unpause"
      | "updateCertificateDetails"
      | "updateSemesterCertificatePhoto"
      | "usedHashes"
      | "usedMemoNumbers"
      | "usedSerialNumbers"
      | "verifyCertificate"
      | "verifySemesterCertificate"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "ApprovalForAll"
      | "BatchMetadataUpdate"
      | "CertificateIssued"
      | "CertificateMetadataStored"
      | "CertificateRevoked"
      | "CertificateVerified"
      | "MetadataUpdate"
      | "Paused"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "SemesterCertificateIssued"
      | "SemesterCertificateRevoked"
      | "Transfer"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MINTER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateSGPA",
    values: [CertificateNFT.CourseStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "certificates",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cidToTokenId",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCIDByTokenId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCertificateData",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSemesterCertificate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getStudentCertificates",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getStudentSemesterCertificates",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenIdByCID",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isMemoNumberUsed",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isSerialNumberUsed",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "mintCertificate",
    values: [AddressLike, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "mintSemesterCertificate",
    values: [
      AddressLike,
      string,
      string,
      CertificateNFT.SemesterCertificateStruct
    ]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeCertificate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeSemesterCertificate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "semesterCertificates",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(functionFragment: "setBaseURI", values: [string]): string;
  encodeFunctionData(
    functionFragment: "studentCertificates",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "studentSemesterCerts",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenIdToCID",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateCertificateDetails",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSemesterCertificatePhoto",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "usedHashes", values: [string]): string;
  encodeFunctionData(
    functionFragment: "usedMemoNumbers",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "usedSerialNumbers",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyCertificate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "verifySemesterCertificate",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "ADMIN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MINTER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateSGPA",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "certificates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cidToTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCIDByTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCertificateData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSemesterCertificate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStudentCertificates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStudentSemesterCertificates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenIdByCID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isMemoNumberUsed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSerialNumberUsed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintCertificate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintSemesterCertificate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeCertificate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "revokeSemesterCertificate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "semesterCertificates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBaseURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "studentCertificates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "studentSemesterCerts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenIdToCID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateCertificateDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSemesterCertificatePhoto",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usedHashes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "usedMemoNumbers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "usedSerialNumbers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyCertificate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifySemesterCertificate",
    data: BytesLike
  ): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    approved: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [owner: string, approved: string, tokenId: bigint];
  export interface OutputObject {
    owner: string;
    approved: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalForAllEvent {
  export type InputTuple = [
    owner: AddressLike,
    operator: AddressLike,
    approved: boolean
  ];
  export type OutputTuple = [
    owner: string,
    operator: string,
    approved: boolean
  ];
  export interface OutputObject {
    owner: string;
    operator: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BatchMetadataUpdateEvent {
  export type InputTuple = [
    _fromTokenId: BigNumberish,
    _toTokenId: BigNumberish
  ];
  export type OutputTuple = [_fromTokenId: bigint, _toTokenId: bigint];
  export interface OutputObject {
    _fromTokenId: bigint;
    _toTokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CertificateIssuedEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    student: AddressLike,
    courseName: string,
    studentName: string,
    grade: string,
    ipfsHash: string,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    tokenId: bigint,
    student: string,
    courseName: string,
    studentName: string,
    grade: string,
    ipfsHash: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    tokenId: bigint;
    student: string;
    courseName: string;
    studentName: string;
    grade: string;
    ipfsHash: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CertificateMetadataStoredEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    cid: string,
    student: AddressLike
  ];
  export type OutputTuple = [tokenId: bigint, cid: string, student: string];
  export interface OutputObject {
    tokenId: bigint;
    cid: string;
    student: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CertificateRevokedEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    student: AddressLike,
    admin: AddressLike
  ];
  export type OutputTuple = [tokenId: bigint, student: string, admin: string];
  export interface OutputObject {
    tokenId: bigint;
    student: string;
    admin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CertificateVerifiedEvent {
  export type InputTuple = [tokenId: BigNumberish, isValid: boolean];
  export type OutputTuple = [tokenId: bigint, isValid: boolean];
  export interface OutputObject {
    tokenId: bigint;
    isValid: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MetadataUpdateEvent {
  export type InputTuple = [_tokenId: BigNumberish];
  export type OutputTuple = [_tokenId: bigint];
  export interface OutputObject {
    _tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SemesterCertificateIssuedEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    student: AddressLike,
    serialNo: string,
    memoNo: string,
    regdNo: string,
    branch: string,
    examination: string,
    sgpa: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    tokenId: bigint,
    student: string,
    serialNo: string,
    memoNo: string,
    regdNo: string,
    branch: string,
    examination: string,
    sgpa: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    tokenId: bigint;
    student: string;
    serialNo: string;
    memoNo: string;
    regdNo: string;
    branch: string;
    examination: string;
    sgpa: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SemesterCertificateRevokedEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    student: AddressLike,
    admin: AddressLike
  ];
  export type OutputTuple = [tokenId: bigint, student: string, admin: string];
  export interface OutputObject {
    tokenId: bigint;
    student: string;
    admin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, tokenId: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CertificateNFT extends BaseContract {
  connect(runner?: ContractRunner | null): CertificateNFT;
  waitForDeployment(): Promise<this>;

  interface: CertificateNFTInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  MINTER_ROLE: TypedContractMethod<[], [string], "view">;

  approve: TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  calculateSGPA: TypedContractMethod<
    [courses: CertificateNFT.CourseStruct[]],
    [bigint],
    "view"
  >;

  certificates: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, string, string, bigint, boolean, string] & {
        studentName: string;
        courseName: string;
        grade: string;
        ipfsHash: string;
        department: string;
        issueDate: bigint;
        isRevoked: boolean;
        issuer: string;
      }
    ],
    "view"
  >;

  cidToTokenId: TypedContractMethod<[arg0: string], [bigint], "view">;

  getApproved: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  getCIDByTokenId: TypedContractMethod<
    [tokenId: BigNumberish],
    [string],
    "view"
  >;

  getCertificateData: TypedContractMethod<
    [tokenId: BigNumberish],
    [CertificateNFT.CertificateDataStructOutput],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getSemesterCertificate: TypedContractMethod<
    [tokenId: BigNumberish],
    [CertificateNFT.SemesterCertificateStructOutput],
    "view"
  >;

  getStudentCertificates: TypedContractMethod<
    [student: AddressLike],
    [bigint[]],
    "view"
  >;

  getStudentSemesterCertificates: TypedContractMethod<
    [student: AddressLike],
    [bigint[]],
    "view"
  >;

  getTokenIdByCID: TypedContractMethod<[cid: string], [bigint], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  isApprovedForAll: TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;

  isMemoNumberUsed: TypedContractMethod<[memoNo: string], [boolean], "view">;

  isSerialNumberUsed: TypedContractMethod<
    [serialNo: string],
    [boolean],
    "view"
  >;

  mintCertificate: TypedContractMethod<
    [student: AddressLike, courseName: string, grade: string, ipfsHash: string],
    [bigint],
    "nonpayable"
  >;

  mintSemesterCertificate: TypedContractMethod<
    [
      student: AddressLike,
      serialNo: string,
      memoNo: string,
      certData: CertificateNFT.SemesterCertificateStruct
    ],
    [bigint],
    "nonpayable"
  >;

  name: TypedContractMethod<[], [string], "view">;

  ownerOf: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeCertificate: TypedContractMethod<
    [tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeSemesterCertificate: TypedContractMethod<
    [tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  "safeTransferFrom(address,address,uint256)": TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  "safeTransferFrom(address,address,uint256,bytes)": TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  semesterCertificates: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        string,
        bigint,
        string,
        boolean
      ] & {
        studentName: string;
        serialNo: string;
        memoNo: string;
        regdNo: string;
        branch: string;
        examination: string;
        monthYearExams: string;
        aadharNo: string;
        studentPhoto: string;
        totalCredits: bigint;
        sgpa: bigint;
        mediumOfInstruction: string;
        issueDate: bigint;
        issuer: string;
        isRevoked: boolean;
      }
    ],
    "view"
  >;

  setApprovalForAll: TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;

  setBaseURI: TypedContractMethod<[baseURI: string], [void], "nonpayable">;

  studentCertificates: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  studentSemesterCerts: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  tokenIdToCID: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  tokenURI: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  updateCertificateDetails: TypedContractMethod<
    [tokenId: BigNumberish, studentName: string, department: string],
    [void],
    "nonpayable"
  >;

  updateSemesterCertificatePhoto: TypedContractMethod<
    [tokenId: BigNumberish, studentPhoto: string],
    [void],
    "nonpayable"
  >;

  usedHashes: TypedContractMethod<[arg0: string], [boolean], "view">;

  usedMemoNumbers: TypedContractMethod<[arg0: string], [boolean], "view">;

  usedSerialNumbers: TypedContractMethod<[arg0: string], [boolean], "view">;

  verifyCertificate: TypedContractMethod<
    [tokenId: BigNumberish],
    [
      [CertificateNFT.CertificateDataStructOutput, boolean] & {
        certificateData: CertificateNFT.CertificateDataStructOutput;
        isValid: boolean;
      }
    ],
    "view"
  >;

  verifySemesterCertificate: TypedContractMethod<
    [tokenId: BigNumberish],
    [
      [CertificateNFT.SemesterCertificateStructOutput, boolean] & {
        certificateData: CertificateNFT.SemesterCertificateStructOutput;
        isValid: boolean;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MINTER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "calculateSGPA"
  ): TypedContractMethod<
    [courses: CertificateNFT.CourseStruct[]],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "certificates"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, string, string, bigint, boolean, string] & {
        studentName: string;
        courseName: string;
        grade: string;
        ipfsHash: string;
        department: string;
        issueDate: bigint;
        isRevoked: boolean;
        issuer: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "cidToTokenId"
  ): TypedContractMethod<[arg0: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "getApproved"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getCIDByTokenId"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getCertificateData"
  ): TypedContractMethod<
    [tokenId: BigNumberish],
    [CertificateNFT.CertificateDataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getSemesterCertificate"
  ): TypedContractMethod<
    [tokenId: BigNumberish],
    [CertificateNFT.SemesterCertificateStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getStudentCertificates"
  ): TypedContractMethod<[student: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getStudentSemesterCertificates"
  ): TypedContractMethod<[student: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getTokenIdByCID"
  ): TypedContractMethod<[cid: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isApprovedForAll"
  ): TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isMemoNumberUsed"
  ): TypedContractMethod<[memoNo: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "isSerialNumberUsed"
  ): TypedContractMethod<[serialNo: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "mintCertificate"
  ): TypedContractMethod<
    [student: AddressLike, courseName: string, grade: string, ipfsHash: string],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mintSemesterCertificate"
  ): TypedContractMethod<
    [
      student: AddressLike,
      serialNo: string,
      memoNo: string,
      certData: CertificateNFT.SemesterCertificateStruct
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ownerOf"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeCertificate"
  ): TypedContractMethod<[tokenId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeSemesterCertificate"
  ): TypedContractMethod<[tokenId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256)"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256,bytes)"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "semesterCertificates"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        string,
        bigint,
        string,
        boolean
      ] & {
        studentName: string;
        serialNo: string;
        memoNo: string;
        regdNo: string;
        branch: string;
        examination: string;
        monthYearExams: string;
        aadharNo: string;
        studentPhoto: string;
        totalCredits: bigint;
        sgpa: bigint;
        mediumOfInstruction: string;
        issueDate: bigint;
        issuer: string;
        isRevoked: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "setApprovalForAll"
  ): TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setBaseURI"
  ): TypedContractMethod<[baseURI: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "studentCertificates"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "studentSemesterCerts"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenIdToCID"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "tokenURI"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateCertificateDetails"
  ): TypedContractMethod<
    [tokenId: BigNumberish, studentName: string, department: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateSemesterCertificatePhoto"
  ): TypedContractMethod<
    [tokenId: BigNumberish, studentPhoto: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "usedHashes"
  ): TypedContractMethod<[arg0: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "usedMemoNumbers"
  ): TypedContractMethod<[arg0: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "usedSerialNumbers"
  ): TypedContractMethod<[arg0: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "verifyCertificate"
  ): TypedContractMethod<
    [tokenId: BigNumberish],
    [
      [CertificateNFT.CertificateDataStructOutput, boolean] & {
        certificateData: CertificateNFT.CertificateDataStructOutput;
        isValid: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "verifySemesterCertificate"
  ): TypedContractMethod<
    [tokenId: BigNumberish],
    [
      [CertificateNFT.SemesterCertificateStructOutput, boolean] & {
        certificateData: CertificateNFT.SemesterCertificateStructOutput;
        isValid: boolean;
      }
    ],
    "view"
  >;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "ApprovalForAll"
  ): TypedContractEvent<
    ApprovalForAllEvent.InputTuple,
    ApprovalForAllEvent.OutputTuple,
    ApprovalForAllEvent.OutputObject
  >;
  getEvent(
    key: "BatchMetadataUpdate"
  ): TypedContractEvent<
    BatchMetadataUpdateEvent.InputTuple,
    BatchMetadataUpdateEvent.OutputTuple,
    BatchMetadataUpdateEvent.OutputObject
  >;
  getEvent(
    key: "CertificateIssued"
  ): TypedContractEvent<
    CertificateIssuedEvent.InputTuple,
    CertificateIssuedEvent.OutputTuple,
    CertificateIssuedEvent.OutputObject
  >;
  getEvent(
    key: "CertificateMetadataStored"
  ): TypedContractEvent<
    CertificateMetadataStoredEvent.InputTuple,
    CertificateMetadataStoredEvent.OutputTuple,
    CertificateMetadataStoredEvent.OutputObject
  >;
  getEvent(
    key: "CertificateRevoked"
  ): TypedContractEvent<
    CertificateRevokedEvent.InputTuple,
    CertificateRevokedEvent.OutputTuple,
    CertificateRevokedEvent.OutputObject
  >;
  getEvent(
    key: "CertificateVerified"
  ): TypedContractEvent<
    CertificateVerifiedEvent.InputTuple,
    CertificateVerifiedEvent.OutputTuple,
    CertificateVerifiedEvent.OutputObject
  >;
  getEvent(
    key: "MetadataUpdate"
  ): TypedContractEvent<
    MetadataUpdateEvent.InputTuple,
    MetadataUpdateEvent.OutputTuple,
    MetadataUpdateEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "SemesterCertificateIssued"
  ): TypedContractEvent<
    SemesterCertificateIssuedEvent.InputTuple,
    SemesterCertificateIssuedEvent.OutputTuple,
    SemesterCertificateIssuedEvent.OutputObject
  >;
  getEvent(
    key: "SemesterCertificateRevoked"
  ): TypedContractEvent<
    SemesterCertificateRevokedEvent.InputTuple,
    SemesterCertificateRevokedEvent.OutputTuple,
    SemesterCertificateRevokedEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "ApprovalForAll(address,address,bool)": TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;
    ApprovalForAll: TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;

    "BatchMetadataUpdate(uint256,uint256)": TypedContractEvent<
      BatchMetadataUpdateEvent.InputTuple,
      BatchMetadataUpdateEvent.OutputTuple,
      BatchMetadataUpdateEvent.OutputObject
    >;
    BatchMetadataUpdate: TypedContractEvent<
      BatchMetadataUpdateEvent.InputTuple,
      BatchMetadataUpdateEvent.OutputTuple,
      BatchMetadataUpdateEvent.OutputObject
    >;

    "CertificateIssued(uint256,address,string,string,string,string,uint256)": TypedContractEvent<
      CertificateIssuedEvent.InputTuple,
      CertificateIssuedEvent.OutputTuple,
      CertificateIssuedEvent.OutputObject
    >;
    CertificateIssued: TypedContractEvent<
      CertificateIssuedEvent.InputTuple,
      CertificateIssuedEvent.OutputTuple,
      CertificateIssuedEvent.OutputObject
    >;

    "CertificateMetadataStored(uint256,string,address)": TypedContractEvent<
      CertificateMetadataStoredEvent.InputTuple,
      CertificateMetadataStoredEvent.OutputTuple,
      CertificateMetadataStoredEvent.OutputObject
    >;
    CertificateMetadataStored: TypedContractEvent<
      CertificateMetadataStoredEvent.InputTuple,
      CertificateMetadataStoredEvent.OutputTuple,
      CertificateMetadataStoredEvent.OutputObject
    >;

    "CertificateRevoked(uint256,address,address)": TypedContractEvent<
      CertificateRevokedEvent.InputTuple,
      CertificateRevokedEvent.OutputTuple,
      CertificateRevokedEvent.OutputObject
    >;
    CertificateRevoked: TypedContractEvent<
      CertificateRevokedEvent.InputTuple,
      CertificateRevokedEvent.OutputTuple,
      CertificateRevokedEvent.OutputObject
    >;

    "CertificateVerified(uint256,bool)": TypedContractEvent<
      CertificateVerifiedEvent.InputTuple,
      CertificateVerifiedEvent.OutputTuple,
      CertificateVerifiedEvent.OutputObject
    >;
    CertificateVerified: TypedContractEvent<
      CertificateVerifiedEvent.InputTuple,
      CertificateVerifiedEvent.OutputTuple,
      CertificateVerifiedEvent.OutputObject
    >;

    "MetadataUpdate(uint256)": TypedContractEvent<
      MetadataUpdateEvent.InputTuple,
      MetadataUpdateEvent.OutputTuple,
      MetadataUpdateEvent.OutputObject
    >;
    MetadataUpdate: TypedContractEvent<
      MetadataUpdateEvent.InputTuple,
      MetadataUpdateEvent.OutputTuple,
      MetadataUpdateEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "SemesterCertificateIssued(uint256,address,string,string,string,string,string,uint256,uint256)": TypedContractEvent<
      SemesterCertificateIssuedEvent.InputTuple,
      SemesterCertificateIssuedEvent.OutputTuple,
      SemesterCertificateIssuedEvent.OutputObject
    >;
    SemesterCertificateIssued: TypedContractEvent<
      SemesterCertificateIssuedEvent.InputTuple,
      SemesterCertificateIssuedEvent.OutputTuple,
      SemesterCertificateIssuedEvent.OutputObject
    >;

    "SemesterCertificateRevoked(uint256,address,address)": TypedContractEvent<
      SemesterCertificateRevokedEvent.InputTuple,
      SemesterCertificateRevokedEvent.OutputTuple,
      SemesterCertificateRevokedEvent.OutputObject
    >;
    SemesterCertificateRevoked: TypedContractEvent<
      SemesterCertificateRevokedEvent.InputTuple,
      SemesterCertificateRevokedEvent.OutputTuple,
      SemesterCertificateRevokedEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
